---
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faHandshake } from "@fortawesome/free-solid-svg-icons";
import type { IconDefinition } from "@fortawesome/fontawesome-svg-core";

export interface Skill {
  name: string;
  description?: string;
  icon?: IconDefinition;
  level?: string;
}

interface Props {
  skills: Skill[];
  split?: boolean;
}

const { skills, split = false } = Astro.props;

const half = Math.ceil(skills.length / 2);
const skillsGroup1 = split ? skills.slice(0, half) : skills;

console.log("Skill icons:", skills);
---

<section class="skills-section">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="skills-grid">
      {
        skillsGroup1.map((skill, index) => (
          <div class="skill-card bg-white dark:bg-gray-800 rounded-lg shadow-md border border-transparent dark:border-gray-700 mb-4 sm:mb-6">
            <button class="skill-header w-full text-left p-3 sm:p-4 md:p-8 flex items-center justify-between">
              <div class="icon-wrapper flex items-center">
                <FontAwesomeIcon
                  icon={skill.icon || faHandshake}
                  className="text-gray-700 dark:text-gray-200"
                />
              </div>
              <div class="text-wrapper flex-1">
                <div class="text-2xl font-semibold text-blue-700 dark:text-blue-200">
                  {skill.name}
                </div>
              </div>
              <div class="toggle-wrapper flex items-center justify-center">
                <span class="toggle-icon text-xl text-gray-700 dark:text-gray-200">
                  &#x25BC;
                </span>
              </div>
            </button>
            <div class="skill-content p-0 m-0 hidden">
              <div class="content-wrapper p-0 m-0">
                <div class="py-3 sm:py-4 md:py-6 px-2 sm:px-4 md:px-6 bg-gray-50 dark:bg-black">
                  <p class="text-gray-600 dark:text-gray-300 text-center">
                    {skill.description}
                  </p>
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  .skill-header {
    min-height: 6rem;
    cursor: pointer;
    position: relative;
    padding: 1.25rem 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .icon-wrapper {
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .text-wrapper {
    flex: 1;
    text-align: center;
    padding-left: 0;
    padding-right: 0;
  }

  @media (min-width: 640px) {
    .text-wrapper {
      padding-left: 3rem;
      padding-right: 2rem;
    }
  }

  .toggle-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    /* Removed height: 100%; */
  }

  .toggle-icon {
    transition: transform 0.3s ease;
    border: 2px solid #94a3b8;
    border-radius: 50%;
    width: 3rem;
    height: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    padding-top: 5px;
  }

  .skill-header[aria-expanded="true"] .toggle-icon {
    transform: rotate(180deg);
  }

  .skill-content {
    display: none;
    transition:
      max-height 0.5s ease-in,
      opacity 0.5s ease-in,
      height 0.5s ease-in;
  }

  .skill-content.active {
    display: block;
    width: 100%;
    position: relative;
    height: auto;
  }

  .skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
  }

  @media (max-width: 640px) {
    .skill-header {
      display: flex;
      flex-direction: row;
      align-items: center;
    }

    .skills-grid {
      gap: 1.5rem;
    }
  }

  @media (min-width: 1024px) {
    .skills-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 2rem;
    }
  }

  @media (max-width: 1023px) {
    .mobile-margin {
      margin-bottom: 60px;
    }
  }
</style>

<script>
  function initializeSkillToggles() {
    const skillCards = document.querySelectorAll<HTMLElement>(".skill-card");

    function updateLayout() {
      const isMobile = window.innerWidth <= 1023;
      skillCards.forEach((card) => {
        const content = card.querySelector<HTMLElement>(".skill-content");
        if (content && content.classList.contains("active")) {
          content.classList.toggle("mobile-margin", isMobile);
        }
      });

      // Update grid layout for both skill groups
      const skillsGrids =
        document.querySelectorAll<HTMLElement>(".skills-grid");
      skillsGrids.forEach((grid) => {
        if (isMobile) {
          grid.style.gridTemplateColumns = "1fr";
        } else {
          grid.style.gridTemplateColumns = "repeat(2, 1fr)";
        }
      });
    }

    skillCards.forEach((card) => {
      const header = card.querySelector<HTMLElement>(".skill-header");
      const content = card.querySelector<HTMLElement>(".skill-content");

      if (!header || !content) return;

      header.addEventListener("click", () => {
        const isExpanded = header.getAttribute("aria-expanded") === "true";

        if (isExpanded) {
          header.setAttribute("aria-expanded", "false");
          content.style.maxHeight = "0px";
          content.classList.remove("active", "mobile-margin");
        } else {
          const parentGrid = card.closest(".skills-grid");
          if (parentGrid) {
            parentGrid
              .querySelectorAll<HTMLElement>(".skill-card")
              .forEach((otherCard) => {
                const otherHeader =
                  otherCard.querySelector<HTMLElement>(".skill-header");
                const otherContent =
                  otherCard.querySelector<HTMLElement>(".skill-content");
                if (otherHeader && otherContent) {
                  otherHeader.setAttribute("aria-expanded", "false");
                  otherContent.style.maxHeight = "0px";
                  otherContent.classList.remove("active", "mobile-margin");
                }
              });
          }

          header.setAttribute("aria-expanded", "true");
          content.style.maxHeight = content.scrollHeight + "px";
          content.classList.add("active");
          if (window.innerWidth <= 1023) {
            content.classList.add("mobile-margin");
          }
        }
      });
    });

    window.addEventListener("resize", updateLayout);
    updateLayout();
  }

  document.addEventListener("astro:page-load", initializeSkillToggles);
  window.addEventListener("themeChange", initializeSkillToggles);
  initializeSkillToggles();
</script>
