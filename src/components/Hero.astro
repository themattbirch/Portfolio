---
import { Image } from "astro:assets";
import lightBackgroundImage from "/assets/images/hero-background-light-theme-toggle.webp";
import darkBackgroundImage from "/assets/images/hero-background-dark-theme-toggle.webp";
import mobileBackgroundImage from "/assets/images/hero_background_mobile.webp";

const lightBackground = lightBackgroundImage.src;
const darkBackground = darkBackgroundImage.src;
const mobileBackground = mobileBackgroundImage.src;
---

<div class="hero-container">
  <Image
    src={lightBackgroundImage}
    alt="Hero Light Background"
    class="hidden"
    loading="lazy"
  />
  <Image
    src={darkBackgroundImage}
    alt="Hero Dark Background"
    class="hidden"
    loading="lazy"
  />
  <Image
    src={mobileBackgroundImage}
    alt="Hero Mobile Background"
    class="hidden"
    loading="lazy"
  />

  <div
    id="hero-background"
    class="absolute inset-0 bg-cover bg-center"
    data-light-background={lightBackground}
    data-dark-background={darkBackground}
    data-mobile-background={mobileBackground}
  >
    <div class="hero-gradient-overlay"></div>
    <div class="hero-dim-overlay"></div>
  </div>

  <div class="relative z-10 w-full">
    <div class="max-w-[1536px] mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-start">
        <div class="max-w-3xl mt-8 sm:mt-16 md:mt-24 lg:mt-32">
          <h1 class="hero-animate hero-title" style="--delay: 0s">
            <span class="gradient-text text-transparent bg-clip-text">
              A Front-End Web Developer
            </span>
          </h1>

          <p
            class="hero-animate hero-tagline"
            style="--delay: 0.5s"
            id="heroTagline"
          >
            Who can write clean code <span
              class="hero-pulse animate-subtlePulse text-blue-800 lg:text-blue-400 dark:text-blue-400 font-bold"
              >and</span
            > copy!
          </p>

          <div class="hero-animate hero-cta" style="--delay: 1s" id="heroCta">
            <a href="/contact" class="hero-button"> Get in Touch </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ lightBackground, darkBackground, mobileBackground }}>
  const updateTheme = () => {
    const isDarkMode = document.documentElement.classList.contains("dark");
    const heroBackground = document.getElementById("hero-background");
    const isSmallScreen = window.innerWidth <= 640;

    if (heroBackground) {
      heroBackground.style.backgroundImage = `url(${
        isDarkMode
          ? darkBackground
          : isSmallScreen
            ? mobileBackground
            : lightBackground
      })`;
    }
  };

  const debounce = (func, wait) => {
    let timeout;
    return function (...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  };

  const debouncedUpdateTheme = debounce(updateTheme, 100);

  const updateUI = () => {
    updateTheme();

    ["heroTagline", "heroCta"].forEach((id) => {
      const element = document.getElementById(id);
      if (element) {
        element.classList.remove("opacity-0", "translate-y-4");
      }
    });
  };

  const setupEventListeners = () => {
    document.addEventListener("astro:page-load", updateUI);
    window.addEventListener("resize", debouncedUpdateTheme);

    // Watch for dark mode changes
    new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === "class") {
          debouncedUpdateTheme();
        }
      });
    }).observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  };

  // Initialize
  document.addEventListener("DOMContentLoaded", () => {
    updateUI();
    setupEventListeners();
  });
</script>

<style>
  @tailwind base;
  @tailwind components;
  @tailwind utilities;

  :root {
    --gradient-primary: linear-gradient(to right, #2563eb, #3b82f6);
    --gradient-secondary: linear-gradient(to right, #2563eb, #1e40af);
    --gradient-hover: linear-gradient(to right, #1d4ed8, #2563eb);
    --gradient-mobile: linear-gradient(to right, #5499df, #2563a7);
  }

  /* Move hero-container out of @layer */
  .hero-container {
    @apply relative h-[66vh] lg:h-screen flex items-center pb-0 sm:pb-8 md:pb-12 lg:pb-16;
  }

  #hero-background {
    transition: background-image 0.5s ease;
  }

  /* Rest of your styles stay the same */
  .gradient-text {
    background-clip: text;
    -webkit-background-clip: text;
    background-image: var(--gradient-secondary);
  }

  .hero-title {
    @apply font-extrabold tracking-tight text-5xl lg:text-6xl xl:text-7xl mb-2 sm:max-w-sm md:max-w-md lg:max-w-full;
    color: #60a5fa;
  }

  .hero-tagline {
    @apply mt-4 sm:mt-6 text-xl sm:text-2xl md:text-3xl lg:text-4xl text-gray-700 dark:text-gray-300 max-w-2xl;
  }

  .hero-cta {
    @apply mt-6 sm:mt-8 md:mt-10;
  }

  .hero-animate {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 1s forwards;
    animation-delay: var(--delay);
  }

  .hero-button {
    @apply text-sm sm:text-base md:text-lg text-white font-bold rounded-full;
    background-image: var(--gradient-primary);
    padding: 0.75rem 1.5rem;
    transition: all 0.3s ease;
  }

  :global(.dark) .hero-title {
    color: #93c5fd;
  }

  @media (min-width: 640px) {
    .gradient-text {
      background-image: var(--gradient-primary);
    }

    .hero-button {
      padding: 1rem 2rem;
    }
  }

  .hero-button:hover {
    background-image: var(--gradient-hover);
    transform: scale(1.05);
    box-shadow:
      0 10px 15px -3px rgba(0, 0, 0, 0.1),
      0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  @media (max-width: 640px) {
    .relative {
      @apply min-h-[500px] flex items-center p-0;
      height: 80vh;
    }

    .hero-content {
      @apply text-left pl-4;
    }

    .gradient-text {
      background-image: var(--gradient-mobile);
    }

    .hero-button {
      background-image: var(--gradient-secondary);
    }

    .hero-button:hover {
      background-image: var(--gradient-hover);
    }
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
