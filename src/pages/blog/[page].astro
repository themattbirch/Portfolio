---
import type { GetStaticPathsOptions } from "astro";
import { type CollectionEntry, getCollection } from "astro:content";
import type { FormattedDate, BlogPostFrontmatter } from "@/types";
import Layout from "../../layouts/Layout.astro";
import Post from "../../components/Post.astro";
import Pagination from "../../components/Pagination.astro";
import CategoryList from "../../components/CategoryList.astro";
import Breadcrumb from "@/components/BreadCrumb.astro";

export const prerender = true;

interface Props {
  page: {
    data: CollectionEntry<"posts">[];
    start: number;
    end: number;
    size: number;
    total: number;
    currentPage: number;
    lastPage: number;
    url: {
      current: string;
      prev: string | undefined;
      next: string | undefined;
    };
  };
}

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  try {
    const posts = await getCollection("posts");
    const sortedPosts = posts.sort((a, b) => {
      const dateA = new Date(a.data.date.raw);
      const dateB = new Date(b.data.date.raw);
      return dateB.getTime() - dateA.getTime();
    });

    // Remove featured post from pagination
    const featuredPost = sortedPosts.find((post) => post.data.featured);
    const nonFeaturedPosts = sortedPosts.filter(
      (post) => post !== featuredPost
    );

    return paginate(nonFeaturedPosts, { pageSize: 6 });
  } catch (error) {
    console.error("Error in getStaticPaths:", error);
    return paginate([], { pageSize: 6 });
  }
}

// Null checks + default values
const { page } = Astro.props;
const posts = page?.data ?? [];
const allCategories = posts.flatMap((post) => post.data.categories ?? []);
const categories = Array.from(new Set(allCategories));

const pageTitle = "Matt Birch's Web Development Blog Pages";
const blogDescription =
  "Explore insightful articles about web development, digital marketing, SEO, and social media. Practical tips and professional insights for developers and marketers.";
---

<Layout
  title={pageTitle}
  description={blogDescription}
  ogImage="/assets/images/blog-page.jpg"
  fullWidth={true}
>
  <div class="horizontal-gradient-wrapper">
    <section
      class="max-w-screen-2xl mx-auto py-8 sm:py-12 md:py-16 lg:py-24 px-4 sm:px-6 md:px-8"
    >
      <div class="max-w-screen-2xl mx-auto">
        <header class="text-center mb-8 sm:mb-12">
          <h1
            class="text-3xl sm:text-4xl md:text-5xl font-bold mb-6 sm:mb-8 md:mb-12"
          >
            {pageTitle}
          </h1>
        </header>

        <div class="flex justify-between items-center my-6 sm:my-8 md:my-12">
          <Breadcrumb current={`Page ${page.currentPage}`} parent="Blog" />
          <CategoryList categories={categories} />
        </div>

        <div
          class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 md:gap-8 my-6 sm:my-8 md:my-12"
        >
          {posts.map((post, index) => <Post post={post} index={index} />)}
        </div>

        <div class="mt-4 sm:mt-6 md:mt-8 flex justify-end">
          <Pagination prevURL={page.url.prev} nextURL={page.url.next} />
        </div>
      </div>
    </section>
  </div>
</Layout>

<style>
  .horizontal-gradient-wrapper {
    background: linear-gradient(to bottom, #ffffff, #dde4ee, #ffffff);
  }
  :global(.dark) .horizontal-gradient-wrapper {
    background: linear-gradient(to bottom, #45617c, #1f2937, #45617c);
  }
</style>
