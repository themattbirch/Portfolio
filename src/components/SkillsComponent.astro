---
export interface Skill {
  name: string;
  description?: string;
  icon?: any;
  level?: string;
}

interface Props {
  skills: Skill[];
}

const { skills } = Astro.props;
---

<section class="skills-section">
  <div class="max-w-full mx-auto px-4 sm:px-6 lg:px-8">
    <div class="skills-grid">
      {
        skills.map((skill) => (
          <div class="skill-card group relative overflow-hidden bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 transition-all duration-300 hover:shadow-xl">
            <button
              class="skill-header w-full text-left p-6 sm:p-8"
              aria-expanded="false"
            >
              <div class="flex items-center justify-between w-full">
                <div class="flex items-center space-x-6 flex-1">
                  <div class="icon-wrapper w-12 h-12 flex items-center justify-center bg-blue-100 dark:bg-blue-900 rounded-lg transform transition-transform group-hover:rotate-12">
                    <span class="text-blue-600 dark:text-blue-300">
                      {skill.icon && <skill.icon className="w-6 h-6" />}
                    </span>
                  </div>

                  <div class="text-wrapper">
                    <h3 class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 dark:from-blue-400 dark:to-blue-600 bg-clip-text text-transparent">
                      {skill.name}
                    </h3>
                  </div>
                </div>

                <div class="toggle-wrapper ml-6">
                  <span class="toggle-icon w-10 h-10 flex items-center justify-center rounded-full bg-blue-50 dark:bg-blue-900 text-blue-600 dark:text-blue-300 transition-transform duration-300">
                    â†“
                  </span>
                </div>
              </div>
            </button>

            <div class="skill-content">
              <div class="p-6 bg-gradient-to-b from-blue-50 to-white dark:from-gray-900 dark:to-gray-800">
                <p class="text-gray-700 dark:text-gray-300 leading-relaxed">
                  {skill.description}
                </p>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  .skill-header {
    min-height: 6rem;
    cursor: pointer;
    position: relative;
    padding: 1.25rem 1rem;
    display: flex;
    align-items: center;
  }

  .icon-wrapper {
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-shrink: 0;
  }

  .text-wrapper {
    flex: 1;
    text-align: left;
    padding-right: 1rem;
  }

  .toggle-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .toggle-icon {
    transition: transform 0.3s ease;
    border: 2px solid #94a3b8;
    border-radius: 50%;
    width: 3rem;
    height: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    padding-top: 5px;
  }

  .skill-header[aria-expanded="true"] .toggle-icon {
    transform: rotate(180deg);
  }

  .skill-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s ease-in-out;
  }

  .skill-content.active {
    max-height: 1000px; /* Adjust this value as needed */
  }

  .skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
  }

  @media (min-width: 768px) {
    .skills-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
    }
  }

  @media (min-width: 1024px) {
    .skills-grid {
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
    }
  }

  @media (max-width: 640px) {
    .skill-header {
      display: flex;
      flex-direction: row;
      align-items: center;
    }

    .skills-grid {
      gap: 1.5rem;
    }
  }

  .skill-card {
    transition:
      transform 0.2s,
      box-shadow 0.2s;
  }

  .skill-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
  }
</style>

<script>
  function initializeSkillToggles() {
    const skillCards = document.querySelectorAll(".skill-card");

    skillCards.forEach((card) => {
      const header = card.querySelector(".skill-header");
      const content = card.querySelector(".skill-content");
      const toggleIcon = header?.querySelector(".toggle-icon");

      if (!header || !content) return;

      header.addEventListener("click", (e) => {
        e.stopPropagation(); // Prevent event bubbling

        const isExpanded = header.getAttribute("aria-expanded") === "true";

        // Only toggle the clicked card
        if (isExpanded) {
          // Closing
          header.setAttribute("aria-expanded", "false");
          content.classList.remove("active");
        } else {
          // Opening
          header.setAttribute("aria-expanded", "true");
          content.classList.add("active");
        }
      });
    });
  }

  // Initialize on page load and theme changes
  document.addEventListener("astro:page-load", initializeSkillToggles);
  window.addEventListener("themeChange", initializeSkillToggles);
  initializeSkillToggles();
</script>
