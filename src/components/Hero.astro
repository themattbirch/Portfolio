---
import { Image } from "astro:assets";
import lightBackgroundImage from "/assets/images/hero-background-light-theme-toggle.webp";
import darkBackgroundImage from "/assets/images/hero-background-dark-theme-toggle.webp";
import mobileBackgroundImage from "/assets/images/hero_background_mobile.webp";

const lightBackground = lightBackgroundImage.src;
const darkBackground = darkBackgroundImage.src;
const mobileBackground = mobileBackgroundImage.src;
---

<div class="hero-container">
  <Image
    src={lightBackgroundImage}
    alt="Hero Light Background"
    class="hidden"
    loading="lazy"
  />
  <Image
    src={darkBackgroundImage}
    alt="Hero Dark Background"
    class="hidden"
    loading="lazy"
  />
  <Image
    src={mobileBackgroundImage}
    alt="Hero Mobile Background"
    class="hidden"
    loading="lazy"
  />

  <div
    id="hero-background"
    class="absolute inset-0 bg-cover bg-center"
    data-light-background={lightBackground}
    data-dark-background={darkBackground}
    data-mobile-background={mobileBackground}
  >
    <div class="hero-gradient-overlay"></div>
    <div class="hero-dim-overlay"></div>
  </div>

  <div class="relative z-10 w-full">
    <div class="max-w-[1536px] mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-start">
        <div class="max-w-3xl mt-8 sm:mt-16 md:mt-24 lg:mt-32">
          <h1 class="hero-animate hero-title" style="--delay: 0s">
            <span class="gradient-text text-transparent bg-clip-text">
              A Full Stack Software Engineer
            </span>
          </h1>

          <p
            class="hero-animate hero-tagline"
            style="--delay: 0.5s"
            id="heroTagline"
          >
            Who can write clean code <span
              class="subtle-pulse text-blue-800 lg:text-blue-400 dark:text-blue-400 font-bold"
              >and</span
            > copy!
          </p>

          <div class="hero-animate hero-cta" style="--delay: 1s" id="heroCta">
            <a href="/contact" class="btn hero-button"> Get in Touch </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ lightBackground, darkBackground, mobileBackground }}>
  const updateTheme = () => {
    const isDarkMode = document.documentElement.classList.contains("dark");
    const heroBackground = document.getElementById("hero-background");
    const isSmallScreen = window.innerWidth <= 640;

    if (heroBackground) {
      heroBackground.style.backgroundImage = `url(${
        isDarkMode
          ? darkBackground
          : isSmallScreen
            ? mobileBackground
            : lightBackground
      })`;
    }
  };

  const debounce = (func, wait) => {
    let timeout;
    return function (...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  };

  const debouncedUpdateTheme = debounce(updateTheme, 100);

  const updateUI = () => {
    updateTheme();

    ["heroTagline", "heroCta"].forEach((id) => {
      const element = document.getElementById(id);
      if (element) {
        element.classList.remove("opacity-0", "translate-y-4");
      }
    });
  };

  const setupEventListeners = () => {
    document.addEventListener("astro:page-load", updateUI);
    window.addEventListener("resize", debouncedUpdateTheme);

    // Watch for dark mode changes
    new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === "class") {
          debouncedUpdateTheme();
        }
      });
    }).observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  };

  // Initialize
  document.addEventListener("DOMContentLoaded", () => {
    updateUI();
    setupEventListeners();
  });
</script>
