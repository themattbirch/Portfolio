---
import PortfolioNav from "./PortfolioNav.astro";
import OpenIcon from "./OpenIcon.astro";
import CloseIcon from "./CloseIcon.astro";
import ThemeToggle from "./ThemeToggle.jsx";

interface MenuItem {
  title: string;
  path?: string;
  children?: MenuItem[];
}

interface Props {
  menuItems: MenuItem[];
}

const { menuItems } = Astro.props;
---

<PortfolioNav>
  <div class="navbar max-w-screen-2xl mx-auto px-4">
    <div class="flex justify-between text-sm items-center h-16">
      <!-- Logo -->
      <div class="flex-shrink-0 flex items-center">
        <a
          href="/"
          class="flex items-center p-1 sm:p-2 rounded-lg logo-container"
        >
          <span class="text-xl custom-md:text-2xl font-semibold logo-text">
            <span class="bracket">&lt;</span>
            <span class="name">matt birch</span>
            <span class="bracket">&gt;</span>
          </span>
        </a>
      </div>

      <!-- Desktop menu -->
      <div class="hidden custom-md:block">
        <nav>
          <ul class="flex items-center space-x-1 sm:space-x-2 lg:space-x-4">
            <li class="mr-4">
              <ThemeToggle client:load />
            </li>
            {
              menuItems.map((item) => (
                <li class="relative group">
                  {!item.children ? (
                    <a
                      href={item.path}
                      class="px-4 py-2 rounded-lg inline-flex items-center h-full transition-all duration-200 neumorphic-button"
                    >
                      <span class="relative z-10">{item.title}</span>
                    </a>
                  ) : (
                    <div class="relative inline-flex items-center h-full">
                      <button class=" px-4 py-2 rounded-lg inline-flex items-center transition-all duration-200 neumorphic-button">
                        <span>{item.title}</span>
                        <svg
                          class="ml-2 h-5 w-5 transform transition-transform duration-200 group-hover:rotate-180"
                          xmlns="http://www.w3.org/2000/svg"
                          viewBox="0 0 20 20"
                          fill="currentColor"
                          aria-hidden="true"
                        >
                          <path
                            fill-rule="evenodd"
                            d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 011.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                            clip-rule="evenodd"
                          />
                        </svg>
                      </button>
                      <ul class="absolute left-0 top-full mt-2 w-48 rounded-lg shadow-lg bg-gray-800 ring-1 ring-black ring-opacity-5 opacity-0 translate-y-2 invisible group-hover:opacity-100 group-hover:translate-y-0 group-hover:visible transition-all duration-200 neumorphic-dropdown">
                        {item.children.map((child) => (
                          <li>
                            <a
                              href={child.path}
                              class="block px-4 py-2 text-sm hover:bg-blue-600 transition-colors duration-150 rounded-lg"
                            >
                              {child.title}
                            </a>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </li>
              ))
            }
          </ul>
        </nav>
      </div>

      <!-- Mobile menu + ThemeToggle -->
      <div class="custom-md:hidden flex items-center">
        <!-- ThemeToggle Button moved to left -->
        <ThemeToggle client:load />

        <!-- Mobile menu button  -->
        <button
          id="mobile-menu-button"
          class="custom-md:hidden inline-flex items-center justify-center p-1 sm:p-2 rounded-lg transition-colors duration-200 neumorphic-button ml-2 sm:ml-4"
        >
          <span class="sr-only">Open main menu</span>
          <OpenIcon class="astronav-open-icon block h-6 w-6" />
          <CloseIcon class="astronav-close-icon hidden h-6 w-6" />
        </button>
      </div>

      <!-- Mobile menu -->
      <div class="custom-md:hidden" id="mobile-menu">
        <div class="px-2 pt-2 pb-3 space-y-1 rounded-lg mt-2">
          {
            menuItems.map((item, index) => (
              <div
                class="mobile-menu-item text-sm sm:text-base"
                style={`animation-delay: ${index * 0.1}s;`}
              >
                {!item.children ? (
                  <a
                    href={item.path}
                    class="mobile-link text-gray-300 hover:bg-gray-700  block px-3 py-2 rounded-md text-base font-medium transition-all duration-200"
                  >
                    <span class="mobile-link-text">{item.title}</span>
                  </a>
                ) : (
                  <div class="relative">
                    <button
                      class="mobile-dropdown-toggle w-full text-left text-gray-300 hover:bg-gray-700 px-3 py-2 rounded-md text-base font-medium flex items-center justify-between transition-all duration-200"
                      aria-expanded="false"
                      data-toggle="dropdown"
                    >
                      <span class="mobile-link-text">{item.title}</span>
                      <svg
                        class="ml-2 h-5 w-5 transform transition-transform duration-200"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                        aria-hidden="true"
                      >
                        <path
                          fill-rule="evenodd"
                          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 011.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                          clip-rule="evenodd"
                        />
                      </svg>
                    </button>
                    <div
                      class="mobile-dropdown-menu mt-2 pl-4 space-y-1"
                      data-panel="dropdown"
                    >
                      {item.children &&
                        item.children.map((child, childIndex) => (
                          <a
                            href={child.path}
                            class="mobile-link text-gray-300 hover:border-b-2 hover:border-blue-400 block px-3 py-2 rounded-md text-sm font-medium transition-all duration-200"
                            style={`animation-delay: ${
                              index * 0.1 + (childIndex + 1) * 0.05
                            }s;`}
                          >
                            <span class="mobile-link-text">{child.title}</span>
                          </a>
                        ))}
                    </div>
                  </div>
                )}
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</PortfolioNav>

<!-- JS for mobile menu, event listeners -->
<script>
  function setupNavbar() {
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const openIcon = document.querySelector(".astronav-open-icon");
    const closeIcon = document.querySelector(".astronav-close-icon");

    if (!mobileMenuButton || !mobileMenu || !openIcon || !closeIcon) {
      return; // Exit if essential elements are missing
    }

    // --- 1. Main Menu Toggle Logic ---
    const toggleMainMenu = () => {
      const isOpening = !mobileMenu.classList.contains("mobile-menu-open");
      mobileMenu.classList.toggle("mobile-menu-open");
      openIcon.classList.toggle("hidden", isOpening);
      closeIcon.classList.toggle("hidden", !isOpening);
      mobileMenuButton.setAttribute("aria-expanded", String(isOpening));
    };

    mobileMenuButton.addEventListener("click", toggleMainMenu);

    // --- 2. Data-Driven Accordion Logic ---
    const dropdownToggles = mobileMenu.querySelectorAll(
      '[data-toggle="dropdown"]',
    );

    dropdownToggles.forEach((toggle) => {
      const panel = toggle.nextElementSibling;
      // Ensure the panel exists and matches our data-attribute selector
      if (panel && panel.matches('[data-panel="dropdown"]')) {
        toggle.addEventListener("click", (e) => {
          e.stopPropagation(); // Prevent the main menu from closing

          // Check if the panel is currently open
          const isOpen = panel.classList.contains("is-open");

          // Toggle the 'is-open' class on both the button and the panel
          toggle.classList.toggle("is-open", !isOpen);
          panel.classList.toggle("is-open", !isOpen);

          // Update ARIA attribute for accessibility
          toggle.setAttribute("aria-expanded", String(!isOpen));

          // The CSS will now handle the SVG rotation automatically via the class on the toggle
        });
      }
    });

    // --- 3. Resize Handling ---
    const handleResize = () => {
      if (
        window.innerWidth >= 820 &&
        mobileMenu.classList.contains("mobile-menu-open")
      ) {
        // If screen is resized to desktop, close the mobile menu
        toggleMainMenu();
      }
    };

    window.addEventListener("resize", handleResize);

    // --- 4. Cleanup Logic for View Transitions ---
    // Return a function that removes all event listeners
    return () => {
      mobileMenuButton.removeEventListener("click", toggleMainMenu);
      window.removeEventListener("resize", handleResize);
      // No need to remove dropdown listeners individually as they are inside the #mobile-menu
      // which gets replaced on navigation.
    };
  }

  // --- Run Setup and Manage Cleanup ---
  let cleanupNavbar = setupNavbar();
  document.addEventListener("astro:after-swap", () => {
    // Before the next page's content swaps in, clean up the old listeners
    if (typeof cleanupNavbar === "function") {
      cleanupNavbar();
    }
    // Set up listeners for the new page's content
    cleanupNavbar = setupNavbar();
  });
</script>
