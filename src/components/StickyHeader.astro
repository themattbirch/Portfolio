---
interface Props {
  scrollY?: number;
  activeClass?: string;
  defaultClass?: string;
  class?: string;
}

const {
  scrollY = 100,
  defaultClass = "",
  activeClass = "",
  class: className = "",
  ...rest
} = Astro.props;
---

<header
  class:list={["astronav-sticky-header", className, defaultClass]}
  {...rest}
>
  <slot />
</header>

<script define:vars={{ scrollY, defaultClass, activeClass }}>
  let ticking = false;

  function updateHeaderState(scrollPos) {
    const headers = document.querySelectorAll(".astronav-sticky-header");
    headers.forEach((header) => {
      const isActive = scrollPos > scrollY;
      header.classList.toggle("is-active", isActive);
      header.setAttribute("data-active", isActive.toString());

      const classArray = activeClass.split(" ");
      const replaceArray = defaultClass.split(" ");

      if (isActive) {
        header.classList.remove(...replaceArray);
        header.classList.add(...classArray);
      } else {
        header.classList.remove(...classArray);
        header.classList.add(...replaceArray);
      }
    });
  }

  function handleScroll() {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        updateHeaderState(window.scrollY);
        ticking = false;
      });
      ticking = true;
    }
  }

  document.addEventListener("scroll", handleScroll);

  // Initial state on page load
  updateHeaderState(window.scrollY);

  // Clean up event listener on component unmount
  document.addEventListener("astro:before-swap", () => {
    document.removeEventListener("scroll", handleScroll);
  });
</script>
