---
export interface Skill {
  name: string;
  description?: string;
  icon?: string;
  level?: string;
}

interface Props {
  skills: Skill[];
  split?: boolean;
}

const { skills, split = false } = Astro.props;

// Split skills array if split prop is true
const half = Math.ceil(skills.length / 2);
const skillsPart1 = split ? skills.slice(0, half) : skills;
const skillsPart2 = split ? skills.slice(half) : [];
---

<section>
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-16">
      {
        skillsPart1.map((skill, index) => (
          <div class="skill-card bg-white dark:bg-gray-800 rounded-lg shadow-md border border-transparent dark:border-gray-700 mb-4 sm:mb-6">
            <button
              class="skill-header w-full text-left p-4 sm:p-6 relative"
              data-skill-toggle={index}
              aria-expanded="false"
            >
              <div class="icon-wrapper absolute left-4 top-1/2 -translate-y-1/2">
                <i class={`fas ${skill.icon} text-2xl text-blue-700`} />
              </div>
              <div class="text-wrapper sm:text-center pl-12 pr-8">
                <div class="text-lg font-semibold text-gray-700 dark:text-gray-200">
                  {skill.name}
                </div>
              </div>
              <span class="toggle-icon text-xl text-gray-500 dark:text-gray-200 absolute right-4 top-1/2 -translate-y-1/2">
                ▼
              </span>
            </button>
            <div class="skill-content hidden">
              <div class="p-4 sm:p-6 bg-gray-50 dark:bg-black rounded-b-lg">
                <p class="text-gray-600 dark:text-gray-300 text-center">
                  {skill.description}
                </p>
                <div class="button-wrapper mt-4 text-center">
                  <button class="skill-level-btn">{skill.level}</button>
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </div>

    {
      split && skillsPart2.length > 0 && (
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-16 mt-8">
          {skillsPart2.map((skill, index) => (
            <div class="skill-card bg-white dark:bg-gray-800 rounded-lg shadow-md border border-transparent dark:border-gray-700">
              <button
                class="skill-header w-full text-left flex items-center p-3 sm:p-6"
                data-skill-toggle={index}
              >
                <div class="icon-wrapper mr-3 sm:mr-4 flex-shrink-0">
                  <i
                    class={`fas ${skill.icon} text-xl sm:text-2xl text-blue-700`}
                  />
                </div>
                <div class="flex-grow sm:text-center">
                  <div class="text-base sm:text-lg font-semibold text-gray-700 dark:text-gray-200">
                    {skill.name}
                  </div>
                </div>
                <span class="toggle-icon text-lg sm:text-xl text-gray-500 dark:text-gray-200 ml-2 sm:ml-4 flex-shrink-0">
                  ▼
                </span>
              </button>
              <div class="skill-content hidden">
                <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-b-lg">
                  <p class="text-gray-600 dark:text-gray-300 text-center">
                    {skill.description}
                  </p>
                  <div class="button-wrapper mt-4 text-center">
                    <button class="skill-level-btn">{skill.level}</button>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )
    }
  </div>
</section>

<style>
  .skill-header {
    min-height: 6rem;
    cursor: pointer;
    position: relative;
    padding: 1.25rem 1rem;
  }

  .icon-wrapper {
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .text-wrapper {
    width: 100%;
    padding-left: 3.5rem;
    padding-right: 2.5rem;
  }

  .skill-content {
    display: none;
  }

  .skill-content.active {
    display: block;
  }

  .skill-level-btn {
    background-color: #1d4ed8;
    color: #ffffff;
    padding: 10px 20px;
    border-radius: 50px;
    font-size: 1rem;
    transition: background-color 0.3s ease;
  }

  .skill-level-btn:hover {
    background-color: #1e40af;
  }

  @media (max-width: 640px) {
    .skill-header {
      padding: 2rem;
      min-height: 3.5rem;
    }

    .text-wrapper {
      padding-left: 2.5rem;
      padding-right: 2rem;
    }
  }
</style>

<script>
  function initializeSkillToggles() {
    const skillCards = document.querySelectorAll<HTMLElement>(".skill-card");

    skillCards.forEach((card, index) => {
      let header = card.querySelector(".skill-header");
      const content = card.querySelector<HTMLElement>(".skill-content");
      const icon = card.querySelector<HTMLElement>(".toggle-icon");

      if (!header || !content || !icon) return;

      // Clear any previous event listeners to avoid multiple bindings
      header.replaceWith(header.cloneNode(true));
      header = card.querySelector(".skill-header");

      header?.addEventListener("click", () => {
        const isExpanded = content.classList.contains("active");

        // Close all other cards
        skillCards.forEach((otherCard, otherIndex) => {
          if (otherIndex !== index) {
            const otherContent =
              otherCard.querySelector<HTMLElement>(".skill-content");
            const otherIcon =
              otherCard.querySelector<HTMLElement>(".toggle-icon");
            if (otherContent && otherIcon) {
              otherContent.style.maxHeight = "0px";
              otherContent.classList.remove("active");
              otherIcon.textContent = "▼";
            }
          }
        });

        // Toggle the clicked card
        if (isExpanded) {
          content.style.maxHeight = "0px";
          content.classList.remove("active");
          icon.textContent = "▼";
        } else {
          content.style.maxHeight = content.scrollHeight + "px";
          content.classList.add("active");
          icon.textContent = "▲";
        }
      });
    });
  }

  document.addEventListener("astro:page-load", initializeSkillToggles);
  window.addEventListener("themeChange", initializeSkillToggles);
  initializeSkillToggles();
</script>
