---
import { Image } from "astro:assets";
import lightBackgroundImage from "/assets/images/hero-background-light-theme-toggle.webp";
import darkBackgroundImage from "/assets/images/hero-background-dark-theme-toggle.webp";
import mobileBackgroundImage from "/assets/images/hero_background_mobile.webp";

const lightBackground = lightBackgroundImage.src;
const darkBackground = darkBackgroundImage.src;
const mobileBackground = mobileBackgroundImage.src;
---

<div class="relative h-screen flex items-center pb-0 sm:pb-8 md:pb-12 lg:pb-16">
  <!-- Preload Images Using Image Component -->
  <Image
    src={lightBackgroundImage}
    alt="Hero Light Background"
    class="hidden"
    loading="lazy"
  />
  <Image
    src={darkBackgroundImage}
    alt="Hero Dark Background"
    class="hidden"
    loading="lazy"
  />
  <Image
    src={mobileBackgroundImage}
    alt="Hero Mobile Background"
    class="hidden"
    loading="lazy"
  />

  <!-- Hero Background Container -->
  <div
    id="hero-background"
    class="absolute inset-0 bg-cover bg-center"
    data-light-background={lightBackground}
    data-dark-background={darkBackground}
    data-mobile-background={mobileBackground}
  >
    <div class="hero-gradient-overlay"></div>
    <div class="hero-dim-overlay"></div>
  </div>

  <!-- Hero Content -->
  <div class="relative z-10 w-full">
    <div class="max-w-[1536px] mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-start">
        <div class="max-w-3xl mt-8 sm:mt-16 md:mt-24 lg:mt-32">
          <h1
            class="animate-fadeInUp font-extrabold tracking-tight text-5xl lg:text-6xl xl:text-7xl mb-2 opacity-0 transform translate-y-4 transition-all duration-1000 sm:max-w-sm md:max-w-md lg:max-w-full"
          >
            <span class="gradient-text text-transparent bg-clip-text">
              A Front-End Web Developer
            </span>
          </h1>

          <p
            class="hero-tagline mt-4 sm:mt-6 text-xl sm:text-2xl md:text-3xl lg:text-4xl text-gray-700 dark:text-gray-300 max-w-2xl opacity-0 transform translate-y-4 transition-all duration-1000 delay-500"
            id="heroTagline"
          >
            Who can write clean code <span
              class="hero-pulse animate-subtlePulse text-blue-800 lg:text-blue-400 dark:text-blue-400 font-bold"
              >and</span
            > copy!
          </p>

          <div
            class="mt-6 sm:mt-8 md:mt-10 opacity-0 transform translate-y-4 transition-all duration-1000 delay-1000"
            id="heroCta"
          >
            <a
              href="#contact"
              class="hero-button text-sm sm:text-base md:text-lg"
            >
              Get in Touch
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ lightBackground, darkBackground, mobileBackground }}>
  function updateTheme() {
    const isDarkMode = document.documentElement.classList.contains("dark");
    const heroBackground = document.getElementById("hero-background");
    const isSmallScreen = window.innerWidth <= 640; // Changed from 1024 to 640 (sm breakpoint)

    if (heroBackground) {
      if (isDarkMode) {
        heroBackground.style.backgroundImage = `url(${darkBackground})`;
      } else if (!isSmallScreen) {
        heroBackground.style.backgroundImage = `url(${lightBackground})`;
      } else {
        heroBackground.style.backgroundImage = `url(${mobileBackground})`;
      }
    }
  }

  function debounce(func, wait) {
    let timeout;
    return function (...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  const debouncedUpdateTheme = debounce(updateTheme, 100);

  function animateHeroElements() {
    const elements = ["heroTitle", "heroTagline", "heroCta"];
    elements.forEach((id, index) => {
      const element = document.getElementById(id);
      if (element) {
        element.classList.remove("opacity-0", "translate-y-4");
      }
    });
  }

  function init() {
    updateTheme();
    animateHeroElements();
  }

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", init);

  // Re-initialize when the page content is updated (for Astro view transitions)
  document.addEventListener("astro:page-load", init);

  // Update theme on resize
  window.addEventListener("resize", debouncedUpdateTheme);

  // Observe for dark mode changes
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (
        mutation.type === "attributes" &&
        mutation.attributeName === "class"
      ) {
        debouncedUpdateTheme();
      }
    });
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["class"],
  });
</script>

<style>
  #hero-background {
    transition: background-image 0.5s ease;
  }

  .gradient-text {
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
    background-image: linear-gradient(
      to right,
      #2563eb,
      #1e40af
    ); /* blue-800 to blue-600 */
  }

  .hero-title {
    color: #60a5fa; /* A light blue color, adjust as needed */
  }

  /* Ensure text is visible in dark mode */
  :global(.dark) .hero-title {
    color: #93c5fd; /* Even lighter blue for dark mode */
  }
  @media (min-width: 640px) {
    .gradient-text {
      background-image: linear-gradient(
        to right,
        #2563eb,
        #60a5fa
      ); /* blue-600 to blue-400 */
    }
  }

  .hero-button {
    display: inline-block;
    background-image: linear-gradient(to right, #2563eb, #3b82f6);
    color: white;
    font-weight: bold;
    padding: 0.75rem 1.5rem;
    border-radius: 9999px;
    transition: all 0.3s ease;
  }

  @media (min-width: 640px) {
    .hero-button {
      padding: 1rem 2rem;
    }
  }

  .hero-button:hover {
    background-image: linear-gradient(
      to right,
      #1d4ed8,
      #2563eb
    ); /* blue-700 to blue-600 */
    transform: scale(1.05);
    box-shadow:
      0 10px 15px -3px rgba(0, 0, 0, 0.1),
      0 4px 6px -2px rgba(0, 0, 0, 0.05); /* hover:shadow-lg */
  }

  @media (max-width: 640px) {
    /* Changed from 1024px to 640px */
    .hero-button {
      background-image: linear-gradient(
        to right,
        #1e40af,
        #1d4ed8
      ); /* blue-800 to blue-700 */
    }

    .hero-button:hover {
      background-image: linear-gradient(
        to right,
        #1e3a8a,
        #1e40af
      ); /* blue-900 to blue-800 */
    }
  }

  @media (min-width: 1025px) and (max-width: 1279px) {
    .hero-title {
      max-width: 45%;
    }
  }
  @media (max-width: 640px) {
    .relative {
      height: 80vh;
      min-height: 500px;
      display: flex;
      align-items: center;
      padding: 0; /* Adjust this value to align with the navbar */
    }

    .hero-content {
      text-align: left;
      padding-left: 1rem; /* Ensures that the content starts from the left, aligned with the navbar */
    }

    /* Ensure the text is light enough on mobile */
    .gradient-text {
      background-image: linear-gradient(to right, #76b3f5, #4a90e2);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      -webkit-text-fill-color: transparent;
    }
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
