---
import PortfolioNav from "./PortfolioNav.astro";
import OpenIcon from "./OpenIcon.astro";
import CloseIcon from "./CloseIcon.astro";

interface MenuItem {
  title: string;
  path?: string;
  children?: MenuItem[];
}

interface Props {
  menuItems: MenuItem[];
}

const { menuItems } = Astro.props;

// Custom SVG paths
const customOpenIconPath = "M3 12h18M3 6h18M3 18h18";
---

<PortfolioNav>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <div class="flex-shrink-0 flex items-center">
        <a href="/" class="flex items-center">
          <img
            src="/images/lightbluelogo.png"
            alt="Matt Birch"
            class="h-6 w-auto sm:h-8 md:h-10 transition-all duration-200"
          />
        </a>
      </div>

      <!-- Desktop menu -->
      <div class="hidden md:block">
        <nav>
          <ul class="flex items-center space-x-4">
            {
              menuItems.map((item) => (
                <li class="relative group">
                  {!item.children ? (
                    <a
                      href={item.path}
                      class="text-gray-300 hover:text-white px-3 py-2 rounded-md text-sm font-medium"
                    >
                      {item.title}
                    </a>
                  ) : (
                    <div class="relative">
                      <button class="text-gray-300 hover:text-white px-3 py-2 rounded-md text-sm font-medium inline-flex items-center">
                        <span>{item.title}</span>
                        <svg
                          class="ml-2 h-5 w-5"
                          xmlns="http://www.w3.org/2000/svg"
                          viewBox="0 0 20 20"
                          fill="currentColor"
                          aria-hidden="true"
                        >
                          <path
                            fill-rule="evenodd"
                            d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                            clip-rule="evenodd"
                          />
                        </svg>
                      </button>
                      <ul class="absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 hidden group-hover:block">
                        {item.children.map((child) => (
                          <li>
                            <a
                              href={child.path}
                              class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                            >
                              {child.title}
                            </a>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </li>
              ))
            }
          </ul>
        </nav>
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button
          id="mobile-menu-button"
          class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <OpenIcon class="block" />
          <CloseIcon class="hidden" />
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="md:hidden hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1">
      {
        menuItems.map((item) => (
          <div class="mobile-menu-item">
            {!item.children ? (
              <a
                href={item.path}
                class="text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium"
              >
                {item.title}
              </a>
            ) : (
              <div>
                <button class="mobile-dropdown-toggle w-full text-left text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-base font-medium flex items-center">
                  <span>{item.title}</span>
                  <svg
                    class="h-5 w-5 ml-2 transform transition-transform duration-200"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    aria-hidden="true"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </button>
                <div class="mobile-dropdown-menu hidden pl-4">
                  {item.children.map((child) => (
                    <a
                      href={child.path}
                      class="text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium"
                    >
                      {child.title}
                    </a>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))
      }
    </div>
  </div>
</PortfolioNav>

<script>
  function setupMobileMenu() {
    const menuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const openIcon = menuButton?.querySelector(".astronav-open-icon");
    const closeIcon = menuButton?.querySelector(".astronav-close-icon");

    if (menuButton && mobileMenu && openIcon && closeIcon) {
      menuButton.addEventListener("click", () => {
        mobileMenu.classList.toggle("hidden");
        openIcon.classList.toggle("hidden");
        closeIcon.classList.toggle("hidden");
      });
    }

    const dropdownToggles = document.querySelectorAll(
      ".mobile-dropdown-toggle"
    );
    dropdownToggles.forEach((toggle) => {
      toggle.addEventListener("click", (event) => {
        const target = event.currentTarget as HTMLElement;
        const dropdownMenu = target.nextElementSibling as HTMLElement | null;
        const arrow = target.querySelector("svg");
        if (dropdownMenu) {
          dropdownMenu.classList.toggle("hidden");
          if (arrow) {
            arrow.classList.toggle("rotate-180");
          }
        }
      });
    });
  }

  // Run setup on initial load
  document.addEventListener("astro:page-load", setupMobileMenu);

  // Also run setup immediately in case the page is not using View Transitions
  setupMobileMenu();
</script>
