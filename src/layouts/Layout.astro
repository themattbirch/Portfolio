---
import "../styles/global.css";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import HeadMeta from "../components/HeadMeta.astro";

export interface Props {
  title: string;
  description: string;
  ogImage: string;
  image?: {
    src: string;
    height: number;
    width: number;
    format: "svg" | "avif" | "png" | "webp" | "jpeg" | "jpg" | "tiff" | "gif";
  };
  fullWidth?: boolean;
  preloadLinks?: Array<{ href: string; media?: string }>;
  /** allow noindex on 404/paginated/drafts */
  indexable?: boolean;
  /** optional: pass a complete JSON-LD object from a page (e.g., BlogPosting) */
  schema?: Record<string, any>;
}

const {
  title,
  description,
  ogImage,
  image,
  fullWidth = false,
  preloadLinks = [],
  indexable = true,
  schema,
} = Astro.props;

function cleanUrl(pathname: string) {
  const cleanPath = pathname.replace(/\/index\.html$/, "/");
  return new URL(cleanPath, Astro.site).toString();
}

const canonicalURL = cleanUrl(Astro.url.pathname);
const finalOgImage = image
  ? new URL(image.src, Astro.site).toString()
  : new URL(ogImage, Astro.site).toString();

const robotsMeta = indexable ? "index,follow" : "noindex,nofollow";

const defaultSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "url": "https://mattbirch.co",
  "name": "Matt Birch — Sports Tech & Analytics",
  "description": "Matt Birch builds sports tech products end to end—turning complex data into usable apps. Full-stack engineering, analytics, and AI-powered workflows.",
  "publisher": { "@type": "Person", "name": "Matt Birch", "url": "https://mattbirch.co" },
  "sameAs": [
    "https://twitter.com/themattbirch",
    "https://github.com/themattbirch",
    "https://www.linkedin.com/in/themattbirch"
  ],
  "inLanguage": "en-US"
};

// ✅ Use the string as-is; otherwise stringify the object.
const schemaJson =
  typeof schema === "string" ? schema : JSON.stringify(schema ?? defaultSchema);
---

<!doctype html>
<html lang="en" class="min-h-screen scroll-smooth">
  <head>
    <!-- Basic meta tags -->
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content={robotsMeta} />
    <meta name="googlebot" content={robotsMeta} />

    <script is:inline>
      (() => {
        const getInitialTheme = () => {
          if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
          ) {
            return localStorage.getItem("theme");
          }
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return "dark";
          }
          return "light";
        };
        const theme = getInitialTheme();
        if (theme === "dark") {
          document.documentElement.classList.add("dark");
        } else {
          document.documentElement.classList.remove("dark");
        }
        document.documentElement.style.colorScheme = theme;
      })();
    </script>

    <!-- Additional SEO meta tags -->
    <meta name="format-detection" content="telephone=no" />

    <!-- Security headers -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta
      http-equiv="Content-Security-Policy"
      content="upgrade-insecure-requests"
    />

    <!-- Referrer Policy -->
    <meta name="referrer" content="strict-origin-when-cross-origin" />

    <!-- Permissions Policy -->
    <meta
      http-equiv="Permissions-Policy"
      content="accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=(), interest-cohort=()"
    />

    <!-- Head Meta component w/ dynamic values for SEO -->
    <HeadMeta
      title={title}
      description={description}
      ogImage={finalOgImage}
      canonicalURL={canonicalURL}
    />

    <!-- Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-0DMM273LKZ"
    ></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        window.dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "G-0DMM273LKZ", { page_path: document.location.pathname });
    </script>

    <!-- Schema -->
    <script type="application/ld+json" is:inline>
      {schemaJson}
    </script>

    <script is:inline>
    (() => {
      const getInitialTheme = () => {
        try {
          const t = localStorage.getItem("theme");
          if (t) return t;
        } catch {}
        return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
      };
      const theme = getInitialTheme();
      const root = document.documentElement;
      if (theme === "dark") root.classList.add("dark"); else root.classList.remove("dark");
      root.style.colorScheme = theme;
    })();
  </script>


    <!-- Preload Critical Assets -->
    {
      preloadLinks.map((link) => (
        <link
          rel="preload"
          as="image"
          href={link.href}
          media={link.media ?? "all"}
        />
      ))
    }

    <!-- FontAwesome  -->
    <link
      rel="preload"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
      as="style"
      crossorigin="anonymous"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <noscript>
      <link
        rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
        crossorigin="anonymous"
      />
    </noscript>

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=PT+Serif:wght@400;500;600;700&family=Source+Sans+3:wght@300;400;600;700&display=swap"
      rel="stylesheet"
      media="print"
      onload="this.media='all'"
    />
  </head>
  <body
    class="min-h-screen flex flex-col text-base sm:text-lg md:text-xl antialiased"
  >
    <Header />
    <main
      class={fullWidth ? "w-full" : "max-w-8xl mx-auto px-4 sm:px-6 lg:px-8"}
    >
      <slot />
    </main>
    <Footer />
  </body>
</html>
