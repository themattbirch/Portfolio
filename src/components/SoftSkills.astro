---
interface Skill {
  name: string;
  description?: string;
  icon?: string;
  level?: string;
}

const skills: Skill[] = [
  {
    name: "Empathy",
    description:
      "Proficient in creating structured, semantic markup for web pages.",
    icon: "üñ•Ô∏è",
    level: "Beginner",
  },
  {
    name: "Awareness",
    description:
      "Skilled in creating interactive web experiences and manipulating the DOM.",
    icon: "‚öôÔ∏è",
    level: "Skill",
  },
];
---

<section class="padding-bottom:16 transition-colors duration-300">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    <div
      class="skills-container grid grid-cols-1 sm:grid-cols-2 gap-8 bg-white dark:bg-transparent"
    >
      {
        skills.map((skill, index) => (
          <div class="skill-card bg-white dark:bg-gray-800 rounded-lg shadow-md border border-transparent dark:border-gray-700">
            <button
              class="skill-header w-full text-left p-4 flex justify-between items-center"
              data-skill-toggle={index}
            >
              <div class="flex items-center">
                <div class="icon-wrapper mr-3">
                  <span class="icon text-4xl">{skill.icon}</span>
                </div>
                <div class="text-lg font-semibold text-gray-700 dark:text-gray-200">
                  {skill.name}
                </div>
              </div>
              <span class="toggle-icon text-xl text-gray-500 dark:text-gray-200">
                ‚ñº
              </span>
            </button>
            <div class="skill-content hidden">
              <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-b-lg">
                <p class="text-gray-600 dark:text-gray-300">
                  {skill.description}
                </p>
                <div class="button-wrapper mt-4">
                  <button class="skill-level-btn">{skill.level}</button>
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  .icon-wrapper {
    background-color: #6b7280;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .skill-card {
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
  }

  .skill-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
  }

  .skill-header {
    cursor: pointer;
  }

  .skill-content {
    display: none;
  }

  .skill-content.active {
    display: block;
  }

  .skill-level-btn {
    background-color: #10b981;
    color: #ffffff;
    padding: 10px 20px;
    border-radius: 50px;
    font-size: 1rem;
    transition: background-color 0.3s ease;
  }

  .skill-level-btn:hover {
    background-color: #059669;
  }

  .toggle-icon {
    transition: transform 0.3s ease;
  }

  .skill-header[aria-expanded="true"] .toggle-icon {
    transform: rotate(180deg);
  }
</style>
<script>
  function initializeSkillToggles() {
    const skillCards = document.querySelectorAll<HTMLElement>(".skill-card");

    skillCards.forEach((card, index) => {
      let header = card.querySelector(".skill-header");
      const content = card.querySelector<HTMLElement>(".skill-content");
      const icon = card.querySelector<HTMLElement>(".toggle-icon");

      if (!header || !content || !icon) return;

      // Clear any previous event listeners to avoid multiple bindings
      header.replaceWith(header.cloneNode(true));
      header = card.querySelector(".skill-header");

      header?.addEventListener("click", () => {
        const isExpanded = content.classList.contains("active");

        // Close all other cards
        skillCards.forEach((otherCard, otherIndex) => {
          if (otherIndex !== index) {
            const otherContent =
              otherCard.querySelector<HTMLElement>(".skill-content");
            const otherIcon =
              otherCard.querySelector<HTMLElement>(".toggle-icon");
            if (otherContent && otherIcon) {
              otherContent.style.maxHeight = "0px";
              otherContent.classList.remove("active");
              otherIcon.textContent = "‚ñº";
            }
          }
        });

        // Toggle the clicked card
        if (isExpanded) {
          content.style.maxHeight = "0px";
          content.classList.remove("active");
          icon.textContent = "‚ñº";
        } else {
          content.style.maxHeight = content.scrollHeight + "px";
          content.classList.add("active");
          icon.textContent = "‚ñ≤";
        }
      });
    });
  }

  // Ensure the script initializes on page load and theme changes
  document.addEventListener("astro:page-load", initializeSkillToggles);
  window.addEventListener("themeChange", initializeSkillToggles);

  // Also initialize immediately in case the event listeners didn't catch the event
  initializeSkillToggles();
</script>
