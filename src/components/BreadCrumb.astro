---
export interface Props {
  current: string;
  parent?: string;
    className?: string; 

}
const { current, parent } = Astro.props;

// Create breadcrumb items array for structured data
const breadcrumbItems = [
  {
    "@type": "ListItem",
    "position": 1,
    "name": "Home",
    "item": new URL("/", Astro.site).toString()
  }
];

// Add parent item (if exists)
if (parent) {
  breadcrumbItems.push({
    "@type": "ListItem",
    "position": 2,
    "name": parent,
    "item": new URL("/blog", Astro.site).toString()
  });
}

// Adds current page w/ its full URL
breadcrumbItems.push({
  "@type": "ListItem",
  "position": parent ? 3 : 2,
  "name": current,
  "item": new URL(Astro.url.pathname, Astro.site).toString()
});
---

<nav aria-label="breadcrumb">
  <ol class="breadcrumb whitespace-nowrap">
    <li class="breadcrumb-item inline-block">
      <a href="/">Home</a>
    </li>
    {
      parent && (
        <li class="breadcrumb-item inline-block">
          <a href="/blog">{parent}</a>
        </li>
      )
    }
    <li class="breadcrumb-item inline-block active" aria-current="page">
      {current}
    </li>
  </ol>
</nav>

<script type="application/ld+json">
  {JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": breadcrumbItems
  }, null, 2)}
</script>


<style>
  .breadcrumb {
    @apply flex items-center text-sm sm:text-base md:text-lg text-gray-600 min-w-max;
  }

  .breadcrumb-item {
    @apply flex items-center;
  }

  .breadcrumb-item:not(:last-child)::after {
    content: "/";
    @apply mx-1 sm:mx-2;
    white-space: pre;
  }

  .breadcrumb-item a {
    @apply text-blue-600 hover:text-blue-800 transition-colors duration-200;
  }

  .breadcrumb-item.active {
    @apply text-gray-800;
  }

  /* Dark mode styles */
  :global(.dark) .breadcrumb {
    @apply text-zinc-300;
  }

  :global(.dark) .breadcrumb-item a {
    @apply text-sky-100 hover:text-blue-200;
  }

  :global(.dark) .breadcrumb-item.active {
    @apply text-gray-200;
  }
</style>