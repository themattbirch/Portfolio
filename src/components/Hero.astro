---
const lightBackground = "/images/hero-background-light-theme-toggle.png";
const darkBackground = "/images/hero-background-dark-theme-toggle.png";
---

<div class="relative h-screen flex items-center pb-16">
  <div id="hero-background" class="absolute inset-0 bg-cover bg-center">
    <div class="hero-gradient-overlay"></div>
    <div class="hero-dim-overlay"></div>
  </div>

  <div class="relative z-10 w-full">
    <div class="max-w-[1536px] mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-start">
        <div class="max-w-3xl mt-16 sm:mt-32">
          <h1
            class="hero-title mt-6 font-extrabold tracking-tight text-5xl md:text-6xl lg:text-7xl mb-2 opacity-0 transform translate-y-4 transition-all duration-1000 sm:max-w-sm md:max-w-md lg:max-w-full"
            id="heroTitle"
          >
            <span class="gradient-text text-transparent bg-clip-text">
              A Front-End Web Developer
            </span>
          </h1>

          <p
            class="hero-tagline mt-6 text-2xl sm:text-3xl md:text-4xl text-gray-700 dark:text-gray-300 sm:mt-8 max-w-2xl opacity-0 transform translate-y-4 transition-all duration-1000 delay-500"
            id="heroTagline"
          >
            Who can write clean code <span
              class="hero-pulse text-blue-800 lg:text-blue-400 dark:text-blue-400 font-bold animate-pulse"
              >and</span
            > copy!
          </p>

          <div
            class="mt-10 opacity-0 transform translate-y-4 transition-all duration-1000 delay-1000"
            id="heroCta"
          >
            <a href="#contact" class="hero-button"> Get in Touch </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ lightBackground, darkBackground }}>
  function updateTheme() {
    const isDarkMode = document.documentElement.classList.contains("dark");
    const heroBackground = document.getElementById("hero-background");
    const isSmallScreen = window.innerWidth <= 1024;

    if (heroBackground) {
      if (isDarkMode) {
        heroBackground.style.backgroundImage = `url(${darkBackground})`;
      } else if (!isSmallScreen) {
        heroBackground.style.backgroundImage = `url(${lightBackground})`;
      } else {
        // For small screens in light mode, let CSS handle it
        heroBackground.style.backgroundImage = "";
      }
    }
  }

  function debounce(func, wait) {
    let timeout;
    return function (...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  const debouncedUpdateTheme = debounce(updateTheme, 100);

  function animateHeroElements() {
    const elements = ["heroTitle", "heroTagline", "heroCta"];
    elements.forEach((id, index) => {
      const element = document.getElementById(id);
      if (element) {
        element.classList.remove("opacity-0", "translate-y-4");
      }
    });
  }

  function init() {
    updateTheme();
    animateHeroElements();
  }

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", init);

  // Re-initialize when the page content is updated (for Astro view transitions)
  document.addEventListener("astro:page-load", init);

  // Update theme on resize
  window.addEventListener("resize", debouncedUpdateTheme);

  // Observe for dark mode changes
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (
        mutation.type === "attributes" &&
        mutation.attributeName === "class"
      ) {
        debouncedUpdateTheme();
      }
    });
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["class"],
  });
</script>

<style>
  /* Apply default background image for Light Mode on large screens */
  #hero-background {
    background-image: url("/images/hero-background-light-theme-toggle.png");
    transition: background-image 0.5s ease;
  }

  @media (max-width: 1024px) {
    :root:not(.dark) #hero-background {
      background-image: url("/images/hero_background_mobile.jpg");
      background-position: 90% center;
    }
  }

  .dark #hero-background {
    background-image: url("/images/hero-background-dark-theme-toggle.png");
  }

  .gradient-text {
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
    background-image: linear-gradient(
      to right,
      #2563eb,
      #1e40af
    ); /* blue-800 to blue-600 */
  }

  @media (min-width: 1024px) {
    .gradient-text {
      background-image: linear-gradient(
        to right,
        #2563eb,
        #60a5fa
      ); /* blue-600 to blue-400 */
    }
  }

  .hero-button {
    display: inline-block;
    background-image: linear-gradient(
      to right,
      #2563eb,
      #3b82f6
    ); /* blue-600 to blue-500 */
    color: white;
    font-weight: bold;
    padding: 1rem 2rem; /* py-4 px-8 */
    border-radius: 9999px; /* rounded-full */
    transition: all 0.3s ease;
  }

  .hero-button:hover {
    background-image: linear-gradient(
      to right,
      #1d4ed8,
      #2563eb
    ); /* blue-700 to blue-600 */
    transform: scale(1.05);
    box-shadow:
      0 10px 15px -3px rgba(0, 0, 0, 0.1),
      0 4px 6px -2px rgba(0, 0, 0, 0.05); /* hover:shadow-lg */
  }

  @media (max-width: 1024px) {
    .hero-button {
      background-image: linear-gradient(
        to right,
        #1e40af,
        #1d4ed8
      ); /* blue-800 to blue-700 */
    }

    .hero-button:hover {
      background-image: linear-gradient(
        to right,
        #1e3a8a,
        #1e40af
      ); /* blue-900 to blue-800 */
    }
  }

  /*

  @media (max-width: 768px) {
    #hero-background {
      background-position: 80% center;
    }
  }

  @media (max-width: 640px) {
    #hero-background {
      background-position: 50% center;
    }
  }

  */

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
