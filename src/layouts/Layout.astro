---
import { ViewTransitions } from "astro:transitions";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import "../stylesheets/global.css";

export interface Props {
  title?: string;
  description?: string;
  ogImage?: string;
  image?: any;
  fullWidth?: boolean;
}

const {
  title = "Matt Birch | Web Developer",
  description = "Transforming ideas into powerful web experiences. I combine technical expertise with creative problem-solving to deliver websites that not only look great but perform exceptionally.",
  ogImage = "/images/default-og-image.jpg",
  fullWidth = false,
} = Astro.props;

const canonicalURL = Astro.url.href;
---

<!doctype html>
<html lang="en" class="min-h-screen">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/mb-favicon.png" type="image/png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />

    <!-- Preload critical FontAwesome stylesheet -->
    <link
      rel="preload"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
      as="style"
      integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
      integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />

    <!-- Preconnect to Google Fonts for faster loading -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Load Google Fonts asynchronously -->
    <link
      href="https://fonts.googleapis.com/css2?family=PT+Serif:wght@400;500;600;700&family=Source+Sans+3:wght@300;400;600;700&display=swap"
      rel="stylesheet"
      media="print"
    />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, Astro.url)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(ogImage, Astro.url)} />

    <!-- Link to external theme toggle script -->
    <script src="/scripts/theme-toggle.js" defer></script>

    <!-- JSON-LD -->

    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "url": "{Astro.url.href}",
        "name": "{title}",
        "description": "{description}",
        "publisher": {
          "@type": "Organization",
          "name": "Matt Birch"
        },
        "image": {
          "@type": "ImageObject",
          "url": "{new URL(ogImage, Astro.url)}",
          "width": 1200,
          "height": 630
        }
      }
    </script>

    <ViewTransitions />
    <script>
      // This script handles theme changes globally
      function handleThemeChange() {
        const isDark = document.documentElement.classList.contains("dark");
        document.documentElement.style.setProperty(
          "--bg-image",
          `var(--${isDark ? "darkBackground" : "lightBackground"})`
        );
      }

      // Initial theme setup
      handleThemeChange();

      // Watch for theme changes
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (
            mutation.type === "attributes" &&
            mutation.attributeName === "class"
          ) {
            handleThemeChange();
          }
        });
      });

      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });

      document.addEventListener("astro:after-swap", handleThemeChange);
    </script>
  </head>
  <body>
    <Header />
    <main class={fullWidth ? "w-full" : "max-w-8xl mx-auto"}>
      <slot />
    </main>
    <Footer />
    <script>
      // This script sets the initial theme based on localStorage or user preference
      function getInitialTheme(): string {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme") || "light";
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      }

      const theme = getInitialTheme();

      if (theme === "light") {
        document.documentElement.classList.remove("dark");
      } else {
        document.documentElement.classList.add("dark");
      }

      window.localStorage.setItem("theme", theme);
    </script>
  </body>
</html>
