---
import type { ForwardRefExoticComponent, SVGProps, RefAttributes } from "react";

export interface Skill {
  name: string;
  description?: string;
  icon?: ForwardRefExoticComponent<
    SVGProps<SVGSVGElement> & RefAttributes<SVGSVGElement>
  >;
  level?: string;
}

interface Props {
  skills: Skill[];
}

const { skills } = Astro.props;
---

<section class="skills-section">
  <div class="skills-grid">
    {
      skills.map((skill) => (
        <div class="skill-card group relative overflow-hidden bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 transition-all duration-300 hover:shadow-xl">
          <button class="skill-header w-full text-left p-6 sm:p-8">
            <div class="flex items-center justify-between w-full gap-2">
              <div class="icon-wrapper">
                <span class="text-blue-600 dark:text-blue-300">
                  {skill.icon && <skill.icon className="w-6 h-6" />}
                </span>
              </div>

              <div class="text-wrapper">
                <h3 class="text-2xl font-bold text-black dark:text-white">
                  {skill.name}
                </h3>
              </div>

              <div class="toggle-wrapper">
                <span class="toggle-icon">↓</span>
              </div>
            </div>
          </button>

          <div class="skill-content">
            <div class="p-6 bg-gradient-to-b from-blue-50 to-white dark:from-gray-900 dark:to-gray-800">
              <p class="text-gray-700 dark:text-gray-300 leading-relaxed">
                {skill.description}
              </p>
            </div>
          </div>
        </div>
      ))
    }
  </div>
</section>

<style>
  .skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
    align-items: start;
    grid-auto-rows: min-content;
  }

  @media (max-width: 767px) {
    .skills-grid {
      grid-template-columns: 1fr;
      margin: 0 auto;
    }
  }

  @media (min-width: 768px) and (max-width: 1023px) {
    .skills-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
    }

    .skill-card:last-child:nth-child(2n + 1) {
      grid-column: 1 / -1;
      max-width: 500px;
      justify-self: center;
    }
  }

  @media (min-width: 1024px) {
    .skills-grid {
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
      margin: 0 auto;
    }

    .skill-card:last-child:nth-child(3n + 1) {
      grid-column: 2 / 3;
    }
  }

  .skill-header {
    min-height: 6rem;
    cursor: pointer;
    padding: 1.25rem 1rem;
    display: flex;
    align-items: center;
  }

  .skill-card {
    transition:
      transform 0.2s,
      box-shadow 0.2s;
  }

  .skill-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
  }

  /* 1. The default, closed state for the content panel */
  .skill-content {
    overflow: hidden;
    max-height: 0;
    transition: max-height 0.5s cubic-bezier(0.22, 1, 0.36, 1);
  }

  /* 2. The open state: when the PARENT card has .is-active, open the panel */
  .skill-card.is-active .skill-content {
    max-height: 500px; /* A value larger than the content will ever be */
  }

  /* 3. The icon rotation: when the PARENT card has .is-active, rotate the icon */
  .skill-card.is-active .toggle-icon {
    transform: rotate(180deg);
  }
  .icon-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 35px;
    height: 35px;
    background-color: #e0f2fe;
    border-radius: 8px;
    flex-shrink: 0;
  }

  .text-wrapper {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-weight: bold;
  }

  .toggle-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.25rem;
    height: 2.25rem;
    border: 2px solid #94a3b8;
    border-radius: 50%;
    color: #2563eb;
    transition: transform 0.3s ease;
  }

  .toggle-icon {
    font-size: 1.5rem;
    line-height: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 2px solid #94a3b8;
    border-radius: 50%;
    width: 2.25rem;
    height: 2.25rem;
    color: #2563eb;
    transition: transform 0.3s ease;
  }

  :global(.dark) .skill-card {
    background: linear-gradient(to bottom right, #2d3748, #1a202c);
    color: #e2e8f0;
    border: 1px solid #4a5568;
  }

  :global(.dark) .skill-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.5);
  }

  :global(.dark) .icon-wrapper {
    background-color: #4a5568;
    color: #90cdf4;
  }

  :global(.dark) .toggle-wrapper {
    border: 2px solid #90cdf4;
    color: #90cdf4;
  }

  :global(.dark) .toggle-icon {
    color: #90cdf4;
  }

  :global(.dark) .text-wrapper h3 {
    background: linear-gradient(to right, #90cdf4, #63b3ed);
    -webkit-background-clip: text;
    color: transparent;
  }

  @media (max-width: 640px) {
    .skill-header {
      flex-direction: row;
      align-items: center;
    }

    .skills-grid {
      gap: 2rem;
    }
    .skill-header {
      flex-direction: row;
      align-items: center;
    }
  }
</style>

<script type="module" is:inline>
  import init from '/src/scripts/skill-toggles.ts';

  // 1 – run right now for the initial page
  init();

  // 2 – run again after any Astro client-side navigation
  document.addEventListener('astro:page-load', init);
</script>



