---
export interface Props {
  children?: any;
}

const { children } = Astro.props;
---

<div>
  <slot />
</div>

<script>
  function setupMobileMenu() {
    const mobileMenu = document.querySelector("#mobile-menu");
    const mobileMenuButton = document.querySelector("#mobile-menu-button");

    // Check if mobileMenu exists + is an HTMLElement
    if (!mobileMenu || !(mobileMenu instanceof HTMLElement)) {
      console.error("Mobile menu element not found or is not an HTMLElement");
      return;
    }
    const mobileMenuElement = mobileMenu;

    // Check if mobileMenuButton exists + is an HTMLElement
    if (!mobileMenuButton || !(mobileMenuButton instanceof HTMLElement)) {
      console.error(
        "Mobile menu button element not found or is not an HTMLElement"
      );
      return;
    }
    const mobileMenuButtonElement = mobileMenuButton;

    const closeOnClick = mobileMenuElement.dataset.closeOnClick === "true";

    const menuIcon = mobileMenuButtonElement.querySelector(".menu-icon");
    const closeIcon = mobileMenuButtonElement.querySelector(".close-icon");

    function toggleMobileMenu() {
      mobileMenuElement.classList.toggle("hidden");
      const isExpanded = !mobileMenuElement.classList.contains("hidden");
      mobileMenuButtonElement.setAttribute(
        "aria-expanded",
        isExpanded.toString()
      );

      if (menuIcon && closeIcon) {
        menuIcon.classList.toggle("hidden");
        closeIcon.classList.toggle("hidden");
      }
    }

    // Handle screen resize
    function handleResize() {
      if (window.innerWidth >= 768) {
        // Adjust this breakpoint as needed
        mobileMenuElement.classList.add("hidden");
        if (menuIcon && closeIcon) {
          menuIcon.classList.remove("hidden");
          closeIcon.classList.add("hidden");
        }
      }
    }

    window.addEventListener("resize", handleResize);

    mobileMenuButtonElement.addEventListener("click", toggleMobileMenu);

    if (closeOnClick) {
      const menuItems = mobileMenuElement.querySelectorAll("a");
      menuItems.forEach((item) => {
        item.addEventListener("click", toggleMobileMenu);
      });
    }

    return () => {
      mobileMenuButtonElement.removeEventListener("click", toggleMobileMenu);
      if (closeOnClick) {
        const menuItems = mobileMenuElement.querySelectorAll("a");
        menuItems.forEach((item) => {
          item.removeEventListener("click", toggleMobileMenu);
        });
      }
      window.removeEventListener("resize", handleResize);
    };
  }

  const cleanup = setupMobileMenu();

  // Clean up event listeners when component is unmounted
  document.addEventListener("astro:before-swap", () => {
    if (typeof cleanup === "function") cleanup();
  });
</script>
